---
# Nginx 1.29.1 Installation with ModSecurity from Source
# This replaces the package-based installation to solve PCRE compatibility issues

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install build dependencies for nginx 1.29.1
  apt:
    name:
      - build-essential
      - curl
      - gnupg2
      - ca-certificates
      - lsb-release
      
      - wget
      - git
      - libpcre3-dev
      - libssl-dev
      - zlib1g-dev
      - libxml2-dev
      - libxslt1-dev
      - libgd-dev
      - libgeoip-dev
      - libmodsecurity-dev
      - libmodsecurity3
      - modsecurity-crs
    state: present

- name: Create build directory
  file:
    path: /usr/local/src
    state: directory
    mode: '0755'

- name: Download nginx 1.29.1 source
  get_url:
    url: "https://nginx.org/download/nginx-1.29.1.tar.gz"
    dest: "/usr/local/src/nginx-1.29.1.tar.gz"
    mode: '0644'

- name: Extract nginx 1.29.1 source
  unarchive:
    src: "/usr/local/src/nginx-1.29.1.tar.gz"
    dest: "/usr/local/src"
    remote_src: yes
    creates: "/usr/local/src/nginx-1.29.1"

- name: Check if ModSecurity-nginx exists
  stat:
    path: "/usr/local/src/ModSecurity-nginx"
  register: modsec_nginx_dir

- name: Clone ModSecurity-nginx connector
  git:
    repo: https://github.com/SpiderLabs/ModSecurity-nginx.git
    dest: "/usr/local/src/ModSecurity-nginx"
    depth: 1
  when: 
    - modsecurity_enabled | default(true)
    - not modsec_nginx_dir.stat.exists

- name: Configure nginx 1.29.1 with ModSecurity and full SSL support
  shell: |
    cd /usr/local/src/nginx-1.29.1
    ./configure \
      --prefix=/etc/nginx \
      --sbin-path=/usr/sbin/nginx \
      --modules-path=/etc/nginx/modules \
      --conf-path=/etc/nginx/nginx.conf \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --pid-path=/run/nginx.pid \
      --lock-path=/run/nginx.lock \
      --http-client-body-temp-path=/var/cache/nginx/client_temp \
      --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
      --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
      --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
      --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
      --user={{ nginx_user }} \
      --group={{ nginx_user }} \
      --with-compat \
      --with-file-aio \
      --with-threads \
      --with-http_addition_module \
      --with-http_auth_request_module \
      --with-http_dav_module \
      --with-http_flv_module \
      --with-http_gunzip_module \
      --with-http_gzip_static_module \
      --with-http_mp4_module \
      --with-http_random_index_module \
      --with-http_realip_module \
      --with-http_secure_link_module \
      --with-http_slice_module \
      --with-http_ssl_module \
      --with-http_stub_status_module \
      --with-http_sub_module \
      --with-http_v2_module \
      --with-mail \
      --with-mail_ssl_module \
      --with-stream \
      --with-stream_realip_module \
      --with-stream_ssl_module \
      --with-stream_ssl_preread_module \
      --without-pcre2 \
      --with-pcre \
      --with-pcre-jit{% if modsecurity_enabled | default(false) %} \
      --add-dynamic-module=/usr/local/src/ModSecurity-nginx{% endif %}
  args:
    creates: "/usr/local/src/nginx-1.29.1/objs/Makefile"

- name: Compile nginx 1.29.1
  shell: |
    cd /usr/local/src/nginx-1.29.1
    make -j{{ ansible_processor_vcpus }}
  args:
    creates: "/usr/local/src/nginx-1.29.1/objs/nginx"

- name: Install nginx binary
  copy:
    src: "/usr/local/src/nginx-1.29.1/objs/nginx"
    dest: "/usr/sbin/nginx"
    mode: '0755'
    owner: root
    group: root
    remote_src: yes

- name: Create nginx directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /etc/nginx
    - /etc/nginx/modules
    - /etc/nginx/conf.d
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled
    - /var/log/nginx
    - /var/cache/nginx
    - /var/cache/nginx/client_temp
    - /var/cache/nginx/proxy_temp
    - /var/cache/nginx/fastcgi_temp
    - /var/cache/nginx/uwsgi_temp
    - /var/cache/nginx/scgi_temp

- name: Install ModSecurity module
  copy:
    src: "/usr/local/src/nginx-1.29.1/objs/ngx_http_modsecurity_module.so"
    dest: "/etc/nginx/modules/ngx_http_modsecurity_module.so"
    mode: '0755'
    owner: root
    group: root
    remote_src: yes
  when: modsecurity_enabled | default(true)

- name: Install nginx configuration files
  copy:
    src: "/usr/local/src/nginx-1.29.1/conf/{{ item }}"
    dest: "/etc/nginx/{{ item }}"
    mode: '0644'
    owner: root
    group: root
    remote_src: yes
  loop:
    - mime.types
    - fastcgi_params
    - scgi_params
    - uwsgi_params
    - koi-utf
    - koi-win
    - win-utf

- name: Create ModSecurity configuration directory
  file:
    path: /etc/nginx/modsec
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: modsecurity_enabled | default(true)

- name: Create ModSecurity main configuration
  copy:
    dest: /etc/nginx/modsec/main.conf
    content: |
      # ModSecurity configuration for nginx 1.29.1
      Include /etc/modsecurity/modsecurity.conf
      
      # Include OWASP CRS setup
      Include /etc/modsecurity/crs-setup.conf
      
      # Include OWASP CRS rules
      Include /etc/modsecurity/rules/*.conf
    owner: root
    group: root
    mode: '0644'
  when: modsecurity_enabled | default(true)

- name: Create ModSecurity configuration (v3.0 compatible)
  copy:
    dest: /etc/modsecurity/modsecurity.conf
    content: |
      # ModSecurity configuration optimized for nginx 1.29.1 (v3.0 compatible)
      SecRuleEngine On
      SecRequestBodyAccess On
      SecRequestBodyLimit 13107200
      SecRequestBodyNoFilesLimit 131072
      # SecRequestBodyInMemoryLimit is not supported in ModSecurity v3.0 - removed
      SecRequestBodyLimitAction Reject
      SecRequestBodyJsonDepthLimit 512
      SecResponseBodyAccess On
      SecResponseBodyMimeType text/plain text/html text/xml
      SecResponseBodyLimit 524288
      SecResponseBodyLimitAction ProcessPartial
      SecTmpDir /tmp/
      SecDataDir /tmp/
      SecAuditEngine RelevantOnly
      SecAuditLogRelevantStatus "^(?:5|4(?!04))"
      SecAuditLogParts ABIJDEFHZ
      SecAuditLogType Serial
      SecAuditLog /var/log/nginx/modsec_audit.log
      SecArgumentSeparator &
      SecCookieFormat 0
      SecUnicodeMapFile unicode.mapping 20127
      SecStatusEngine On
    owner: root
    group: root
    mode: '0644'
  when: modsecurity_enabled | default(true)

- name: Setup OWASP CRS rules link
  file:
    src: /usr/share/modsecurity-crs/rules
    dest: /etc/modsecurity/rules
    state: link
    force: yes
  when: modsecurity_enabled | default(true)

- name: Ensure ModSecurity runtime libraries are installed
  apt:
    name:
      - libmodsecurity3
      - modsecurity-crs
    state: present
  when: modsecurity_enabled | default(true)

- name: Copy unicode.mapping file for ModSecurity
  copy:
    src: "/usr/local/src/ModSecurity-nginx/.github/nginx/unicode.mapping"
    dest: "/etc/modsecurity/unicode.mapping"
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  when: modsecurity_enabled | default(true)

- name: Remove existing CRS directory if exists
  file:
    path: /etc/modsecurity/crs
    state: absent
  when: modsecurity_enabled | default(true)

- name: Create CRS symbolic link
  file:
    src: /usr/share/modsecurity-crs
    dest: /etc/modsecurity/crs
    state: link
    force: yes
  when: modsecurity_enabled | default(true)

- name: Copy CRS setup configuration
  copy:
    src: /usr/share/modsecurity-crs/crs-setup.conf.example
    dest: /etc/modsecurity/crs-setup.conf
    remote_src: yes
    owner: root
    group: root
    mode: '0644'
  when: modsecurity_enabled | default(true)
  ignore_errors: yes

- name: Create minimal CRS setup configuration
  copy:
    dest: /etc/modsecurity/crs-setup.conf
    content: |
      # OWASP ModSecurity Core Rule Set Configuration
      # This is a minimal configuration for OWASP CRS
      
      # Set anomaly scoring thresholds (lower = more sensitive)
      SecAction \
        "id:900110,\
         phase:1,\
         nolog,\
         pass,\
         t:none,\
         setvar:tx.inbound_anomaly_score_threshold=5,\
         setvar:tx.outbound_anomaly_score_threshold=4"
      
      # Set paranoia level (1-4, higher = more rules)
      SecAction \
        "id:900000,\
         phase:1,\
         nolog,\
         pass,\
         t:none,\
         setvar:tx.paranoia_level=1"
      
      # Enable sampling percentage
      SecAction \
        "id:900400,\
         phase:1,\
         nolog,\
         pass,\
         t:none,\
         setvar:tx.sampling_percentage=100"
    owner: root
    group: root
    mode: '0644'
  when: modsecurity_enabled | default(true)

- name: Configure nginx
  template:
    src: ../templates/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    backup: yes

- name: Create nginx systemd service
  copy:
    dest: /etc/systemd/system/nginx.service
    content: |
      [Unit]
      Description=nginx - high performance web server
      Documentation=https://nginx.org/en/docs/
      After=network-online.target remote-fs.target nss-lookup.target
      Wants=network-online.target

      [Service]
      Type=forking
      PIDFile=/run/nginx.pid
      ExecStartPre=/usr/sbin/nginx -t
      ExecStart=/usr/sbin/nginx
      ExecReload=/bin/sh -c "/bin/kill -s HUP $(/bin/cat /run/nginx.pid)"
      ExecStop=/bin/sh -c "/bin/kill -s TERM $(/bin/cat /run/nginx.pid)"

      [Install]
      WantedBy=multi-user.target
    owner: root
    group: root
    mode: '0644'

- name: Set nginx cache directory ownership
  file:
    path: /var/cache/nginx
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_user }}"
    recurse: yes

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes

- name: Test nginx configuration
  command: /usr/sbin/nginx -t
  register: nginx_test_result

- name: Display nginx test result
  debug:
    msg: |
      {% if nginx_test_result.rc == 0 %}
      ✅ Nginx 1.29.1 配置测试成功！
      
      📋 安装详情：
      - Nginx版本: 1.29.1 (从源代码编译)
      - ModSecurity: {{ 'Enabled' if modsecurity_enabled | default(false) else 'Disabled' }}
      - PCRE: 强制使用PCRE (解决兼容性问题)
      - 配置文件: /etc/nginx/nginx.conf
      - 模块目录: /etc/nginx/modules
      
      🔧 下一步：
      {% if modsecurity_enabled | default(false) %}
      - 配置ModSecurity级别: /home/doge/ansible-lemp/scripts/toggle-modsecurity.sh [0-10]
      - 查看ModSecurity日志: tail -f /var/log/nginx/modsec_audit.log
      {% endif %}
      - 查看错误日志: tail -f /var/log/nginx/error.log
      - 重新加载配置: sudo systemctl reload nginx
      {% else %}
      ❌ Nginx配置测试失败
      错误信息: {{ nginx_test_result.stderr }}
      建议: 检查配置文件语法或ModSecurity设置
      {% endif %}

- name: Start and enable nginx
  systemd:
    name: nginx
    state: started
    enabled: yes
  when: nginx_test_result.rc == 0

- name: Display installation success
  debug:
    msg: |
      🎉 Nginx 1.29.1 安装成功！
      
      📊 系统状态：
      - Nginx服务: {{ 'Running' if nginx_test_result.rc == 0 else 'Failed' }}
      - 版本: 1.29.1 (源代码编译)
      - SSL支持: ✅ 完整支持 (OpenSSL 3.0.13)
      - HTTP/2: ✅ 启用
      - ModSecurity: {{ 'Active' if modsecurity_enabled | default(false) else 'Disabled' }}
      - PCRE兼容性: ✅ 已解决
      
      🔧 管理命令：
      - 测试配置: sudo nginx -t
      - 重新加载: sudo systemctl reload nginx
      - 查看状态: sudo systemctl status nginx
      - 查看版本: nginx -V
      
      🔒 SSL证书管理：
      - 配置SSL: sudo certbot --nginx -d domain.com
      - 续期证书: sudo certbot renew
      - 测试续期: sudo certbot renew --dry-run
      
      📁 重要路径：
      - 配置: /etc/nginx/nginx.conf
      - 模块: /etc/nginx/modules/
      - 日志: /var/log/nginx/
      - 缓存: /var/cache/nginx/
      - SSL证书: /etc/letsencrypt/live/
      
      {% if modsecurity_enabled | default(false) %}
      🛡️  ModSecurity 控制：
      - Toggle脚本: /home/doge/ansible-lemp/scripts/toggle-modsecurity.sh
      - 配置文件: /etc/nginx/modsec/main.conf
      - 审计日志: /var/log/nginx/modsec_audit.log
      - 推荐级别: 1-2 (Magento2兼容)
      {% endif %}
      
      ⚡ 性能特性：
      - FastCGI缓存: ✅ 配置完成
      - Gzip压缩: ✅ 启用
      - HTTP/2: ✅ 支持
      - Keep-alive: ✅ 优化
      
      🚀 下一步：
      1. 配置域名: 编辑 /etc/nginx/sites-available/your-site.conf
      2. 启用SSL: sudo certbot --nginx -d your-domain.com
      3. 调整ModSecurity: ./scripts/toggle-modsecurity.sh 2
      4. 重新加载: sudo systemctl reload nginx
  when: nginx_test_result.rc == 0